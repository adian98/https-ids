===== IDS ======
Note: this how-to assumes one is in the root directory of the program.

To get an overview of the use flags the IDS provides run:
$ python3.4 main.py --help

This will show flags that alter the behavior of the program. How it
changes the behavior is explained too.

== Usage ==
To generate the data for the paper the IDS was started in the following
way:
$ python3.4 ./main.py /data/nfsen/toorno/flows/20140715:20140715:20140716 -time --sig 5,7,9 --absolom --cusum 14 --packets

Running through the arguments given, the first specifies the file. This
can be a single file or, like in this example, a range of files. The
format of this is "<base-dir>:<lower-limit>:<upper-limit>". So the
argument above translates to all the files between '20140715' and
'20140715' in the folder '/data/nfsen/toorno/flows/20140715'.

'--time' will give a few time statistics at the end of the run.

'--sig 5,7,9' selects the signatures. If no signatures are selected a
menu will be presented listing the signatures along with their numbers.

'--absolom' select the 'absolute' algorithm for detection. This is the
preferred algorithm.

'--cusum 14' is a parameter for the 'absolute' algorithm. In this case
there need to be 14 consecutive flows matching the signature (the
signature 'everything' does not count) for it to be considered an
attack.

'--packets' tells the descriminator to match a signature based on the
ppf. Using '--bytes' here would tell it to use the bpf, using both
'--packets' and '--bytes' makes the descriminator use both the ppf and
bpf.

Note: URLs are only shown if 'nfdump' supports that output. On
Invea-Tech FlowMon Probes and VM's this is supported.

Automation
----------
'automation.py' is a script that calls the IDS with different cusum
thresholds and different descrimination criteria. These two variables
can be configured in the file itself. 

== Validation ==
'scripts/validate.py' is the validation script. During the validation of
the paper results it was called as follows:
$ python3.4 ./scripts/validate.py ../data/verification/absolom/2014-08-14-everything_fa-v2_xmlrpc-14-bpf.idats --cusum 14

The '.idats' file is an output file generated by the IDS (using the
'pipe' output, this is the default output). The resulting report will be
put in './results/', along with a parsed dump. This dump can be viewed
with the tool 'result_viewer' (it will later be discussed). The dump
contains five categories: 'tp', 'tn', 'fp', 'fn' and 'all'. Each
category contains their respective tuples, and 'all' contains all results.

Automation
----------
'scripts/auto_validate.py' is a script that repeatedly calls the
validation script. After the validation is done it will parse all the
result reports and compile them into a single report per descriminator
type, a latex table and data files for a tikz plot. All available cusum
values are used for the plot data and full report data but only a subset
will be used for the latex table. What this subset looks like can be
configured in preamble of this script.


==== Scripts & Tools ====
== Attackers BA & FA ===
Located in 'scripts/attackers_ba.py' and 'scripts/attacker_fa.py'. These
two scripts do the post processing of the ground truth. They are called
as follows:
$ python3.4 ./scripts/attackers_fa.py <path-to-base-dir>:<lower-limit>:<upper-limit>

The second argument is in the same style as the main IDS program.
It will go over the flow data and extract source and destination IPs
that request the same page multiple times. Ultimately three files are
created: 'debug/attackers_data.txt', 'debug/cdf_data.txt' and
'includes/attackers.dump'.

The two text files contain the most information, their format is:
<count> <source-ip> <destination-ip> <page-type> <v-host> <page-url>

<count> is the number of consecutive times a page has been requested.
<source-ip> contains the source IP address of the attacker.
<destination-ip> contains the destination IP address of the attacker.
<page-type> contains what regex matched it (wp-login.php, xmlrpc.php, etc)
<v-host> is the v-host that was requested.
<page-url> is the page of that v-host that was requested.

The difference between the 'attackers_data' file and the 'cdf_data' file is that the 'cdf_data' file only
contains entries with a <count> higer than five. The 'attackers_data'
contains everything, including a <count> of one.

The third file, 'includes/attackers.dump', contains a (Python) pickled
list of tuples, these tuples look like this:
(<source-ip>, <destination-ip>, <count>)

These dumps are required for the validation process as these are the
list of attacker IPs on which the validation is based.

== Compare tool ==
'scripts/compare.py' contains a tool to compare two validation dump files.
It is called as follows:
$ python3.4 ./scripts/compare.py <dump1> <dump2> <type>

<dump1> and <dump2> are paths to two (different dump files), <type> is
one of the categories of those dump files ('tp', 'tn', 'fp', 'fn',
'all').
What this script does is pull out the data that is in one of the dumps
but not in the other, given the category. Then it will show the user
this data. It is meant to give an insight into why things disappear.

== Results viewer ==
This is a similar tool to the 'compare' tool. However this only accepts
one (validation) dump file. It is used like this:
$ python3.4 ./scripts/results_viewer.py <dump> <type>

As with the 'compare' tool, the <dump> is a path to the dump file and
<type> is 'tp', 'tn', 'fp', 'fn' or 'all'. It show the data from that
category in the same way as the 'compare' tool.

== URL extractor ==
'scripts/urlextractor.py' is a tool used to generate a list of
HTTP status codes with their corresponding URLs. The output of this
script was used to generate the list of pages that is protected by HTTP
BA. However since it is rather simple to parse such an output file there
is no script included to translate the output into a file containing
HTTP BA protected pages.

==== IDS Files and Folders ====
For completeness sake I've included a list with short descriptions of
the different files and folders the IDS (and the scripts) uses.

== Folders ==
/conf:
  Here all the configuration files live. There is a config file for the
  IDS itself, for the logging and a config file for the signatures.

/data:
  In here files using the 'pipe' output will be placed. In other words,
  the '.idats' files go here.

/debug:
  While mainly used to store debug bits and pieces they may contain
  useful information.

/doc:
  Contains documentations.

/includes:
  Mostly used by the validation script. Dump files used by the IDS or
  scripts are usually placed here.

/lib:
  Most of the code is in here. In the form of libraries to make it
  somewhat easier to reuse code.

/log:
  Contains log files.

/output:
  If the output option 'save' is used the output is stored here. It
  should be the same as the output 'pager' (minus the colors).

/results:
  This folder is used by the validation script exclusively. It stores
  the individual reports, the individual dump files as well as the
  compiled reports.

/scripts:
  In here to scripts and tools are stored that are not necessarily part
  of the IDS but are useful in the analysis of the results of the IDS.

/tmp:
  This is where the IDS stores temporary files. This mainly comes down
  to nfdump filters to bypass the problem of too long arguments.

== Files ==
/automation.py:
  Automation of the IDS.

/main.py:
  Main file of the IDS.

/conf/ids.conf:
  The configuration file for the IDS.

/conf/logging.conf:
  The configuration file for the logging.

/conf/signatrues.conf:
  In this file the signatures are configured.

/doc/data_structure.txt:
  Documentation on the internal data structure.

/doc/parsable_output.txt:
  Documentation on the data structure of .idats files.

/includes/attackers_ba.dump:
  Used by the validation script, contains a list of BA attacks.

/includes/attackers.dump:
  Used by the valdidation script, contains a list of FA and XMLRPC
  attacks.

/lib/absolom.py:
  Library for the 'absolute' algorithm.

/lib/config.py:
  Config parser.

/lib/flags.py:
  Defines and loads arguments.

/lib/ids.py:
  Main IDS library.

/lib/printer.py:
  Library for printing to screen and saving data.

/lib/signature.py:
  Library for signature matching. (Worker)

/lib/validator.py:
  Used by the validation script. This is the worker.

/lib/worker.py:
  The worker for the IDS.
